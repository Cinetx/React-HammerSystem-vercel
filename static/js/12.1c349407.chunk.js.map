{"version":3,"sources":["history.js","auth/FetchInterceptor.js","redux/selectors/User.js","services/UserServices.js","redux/actions/User.js","views/app-views/main/clients/users-list/index.js"],"names":["history","service","axios","create","baseURL","API_BASE_URL","timeout","ENTRY_ROUTE","interceptors","request","use","config","jwtToken","localStorage","getItem","AUTH_TOKEN","headers","push","window","location","reload","error","notification","message","Promise","reject","response","data","notificationParam","status","description","removeItem","getUsersList","state","user","usersList","getIsUsersLoaded","isUsersListLoaded","getSelectedUser","selectedUser","getIsSelectedUserLoaded","isSelectedUserLoaded","userService","fetch","url","method","id","fetchUsersList","dispatch","then","users","isUserListLoaded","type","LOAD_USERS_LIST","payload","IS_USERS_LIST_LOAD","fetchSelectedUser","LOAD_SELECTED_USER","IS_SELECTED_USER_LOAD","UserList","useState","title","dataIndex","render","company","name","tableColumns","useDispatch","useSelector","isDataLoaded","useEffect","useHistory","bodyStyle","onRow","onClick","path","params","handleSelectUser","columns","dataSource","rowKey"],"mappings":"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","file":"static/js/12.1c349407.chunk.js","sourcesContent":["import * as history from 'history';\r\n\r\nexport default history.createBrowserHistory();","import axios from 'axios'\r\nimport { API_BASE_URL } from 'configs/AppConfig'\r\nimport history from '../history'\r\nimport { AUTH_TOKEN } from 'redux/constants/Auth'\r\nimport { notification } from 'antd';\r\n\r\nconst service = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 60000\r\n})\r\n\r\n// Config\r\nconst ENTRY_ROUTE = '/auth/login'\r\nconst TOKEN_PAYLOAD_KEY = 'authorization'\r\nconst PUBLIC_REQUEST_KEY = 'public-request'\r\n\r\n// API Request interceptor\r\nservice.interceptors.request.use(config => {\r\n\tconst jwtToken = localStorage.getItem(AUTH_TOKEN)\r\n\t\r\n  if (jwtToken) {\r\n    config.headers[TOKEN_PAYLOAD_KEY] = jwtToken\r\n  }\r\n\r\n  if (!jwtToken && !config.headers[PUBLIC_REQUEST_KEY]) {\r\n\t\thistory.push(ENTRY_ROUTE)\r\n\t\twindow.location.reload();\r\n  }\r\n\r\n  return config\r\n}, error => {\r\n\t// Do something with request error here\r\n\tnotification.error({\r\n\t\tmessage: 'Error'\r\n\t})\r\n  Promise.reject(error)\r\n})\r\n\r\n// API respone interceptor\r\nservice.interceptors.response.use( (response) => {\r\n\treturn response.data\r\n}, (error) => {\r\n\r\n\tlet notificationParam = {\r\n\t\tmessage: ''\r\n\t}\r\n\t\r\n\t// Remove token and redirect \r\n\tif (error.response.status === 400 || error.response.status === 403) {\r\n\t\tnotificationParam.message = 'Authentication Fail'\r\n\t\tnotificationParam.description = 'Please login again'\r\n\t\tlocalStorage.removeItem(AUTH_TOKEN)\r\n\t\thistory.push(ENTRY_ROUTE)\r\n\t\twindow.location.reload();\r\n\t}\r\n\r\n\tif (error.response.status === 404) {\r\n\t\tnotificationParam.message = 'Not Found'\r\n\t}\r\n\r\n\tif (error.response.status === 500) {\r\n\t\tnotificationParam.message = 'Internal Server Error'\r\n\t}\r\n\t\r\n\tif (error.response.status === 508) {\r\n\t\tnotificationParam.message = 'Time Out'\r\n\t}\r\n\r\n\tnotification.error(notificationParam)\r\n\r\n\treturn Promise.reject(error);\r\n});\r\n\r\nexport default service","export const getUsersList = (state) => state.user.usersList;\nexport const getIsUsersLoaded = (state) => state.user.isUsersListLoaded;\nexport const getSelectedUser = (state) => state.user.selectedUser;\nexport const getIsSelectedUserLoaded = (state) => state.user.isSelectedUserLoaded;\n","import fetch from 'auth/FetchInterceptor'\n\nconst userService = {}\n\nuserService.getUsersList = function () {\n    return fetch({\n        url: '/users',\n        method: 'get',\n    })\n}\n\nuserService.getSelectedUser = function (id) {\n    return fetch({\n        url: `/users/${id}`,\n        method: 'get',\n    })\n}\n\nexport default userService","import {IS_SELECTED_USER_LOAD, IS_USERS_LIST_LOAD, LOAD_SELECTED_USER, LOAD_USERS_LIST} from \"../constants/User\";\nimport userService from \"../../services/UserServices\";\n\nexport function loadUsersList(usersList) {\n    return {\n        type: LOAD_USERS_LIST,\n        payload: usersList\n    };\n}\nexport function isLoadUsersList(isUserListLoaded) {\n    return {\n        type: IS_USERS_LIST_LOAD,\n        payload: isUserListLoaded\n    };\n}\n\nexport function loadSelectedUser(selectedUser) {\n    return {\n        type: LOAD_SELECTED_USER,\n        payload: selectedUser\n    };\n}\nexport function isSelectedUserLoaded(isSelectedUserLoaded) {\n    return {\n        type: IS_SELECTED_USER_LOAD,\n        payload: isSelectedUserLoaded\n    };\n}\n\nexport function fetchUsersList() {\n    return (dispatch) => {\n        userService.getUsersList()\n            .then((users) => {\n                dispatch(loadUsersList(users))\n                dispatch(isLoadUsersList(true))\n            })\n    };\n}\n\nexport function fetchSelectedUser(id) {\n    return (dispatch) => {\n        userService.getSelectedUser(id)\n            .then((user) => {\n                dispatch(loadSelectedUser(user))\n                dispatch(isSelectedUserLoaded(true))\n            })\n    };\n}\n","import React, {useEffect, useState,} from 'react'\nimport {Card, Table} from 'antd';\nimport {useHistory} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {getIsUsersLoaded, getUsersList} from \"../../../../../redux/selectors/User\";\nimport {fetchSelectedUser, fetchUsersList} from \"../../../../../redux/actions\";\n\nfunction UserList() {\n    const [tableColumns, setTableColumns] = useState([\n        {\n            title: 'User',\n            dataIndex: 'name',\n        },\n        {\n            title: 'Phone',\n            dataIndex: 'phone',\n        },\n        {\n            title: 'Company',\n            dataIndex: 'company',\n            render: company => (\n                <span>{company.name}</span>\n            ),\n\n        },\n        {\n            title: 'WebSite',\n            dataIndex: 'website',\n\n        },\n    ])\n\n    const dispatch = useDispatch()\n\n    const usersList = useSelector(getUsersList)\n    const isDataLoaded = useSelector(getIsUsersLoaded)\n\n    const handlerUsersList = ()=>{\n        dispatch(fetchUsersList())\n    }\n\n    useEffect(()=>{\n        handlerUsersList()\n    }, [isDataLoaded])\n\n    const history = useHistory();\n    const handleSelectUser = (user) => {\n        let path = `user/${user.id}`;\n        history.push(path,{params: user})\n        dispatch(fetchSelectedUser(user.id))\n    }\n\n    return (\n        <Card bodyStyle={{'padding': '0px'}}>\n            {isDataLoaded ?\n                <Table\n                onRow={(user)=>{\n                    return {\n                        onClick: () => {handleSelectUser(user)}\n                    }\n                }}\n                columns={tableColumns}\n                dataSource={usersList}\n                rowKey='id'\n            /> : ''}\n        </Card>\n    )\n}\n\nexport default UserList"],"sourceRoot":""}