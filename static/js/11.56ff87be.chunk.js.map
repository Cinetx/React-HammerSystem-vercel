{"version":3,"sources":["history.js","auth/FetchInterceptor.js","redux/selectors/User.js","services/UserServices.js","redux/actions/User.js","views/app-views/main/clients/user/UserForm.js","views/app-views/main/clients/user/index.js"],"names":["history","service","axios","create","baseURL","API_BASE_URL","timeout","ENTRY_ROUTE","interceptors","request","use","config","jwtToken","localStorage","getItem","AUTH_TOKEN","headers","push","window","location","reload","error","notification","message","Promise","reject","response","data","notificationParam","status","description","removeItem","getUsersList","state","user","usersList","getIsUsersLoaded","isUsersListLoaded","getSelectedUser","selectedUser","getIsSelectedUserLoaded","isSelectedUserLoaded","userService","fetch","url","method","id","fetchUsersList","dispatch","then","users","isUserListLoaded","type","LOAD_USERS_LIST","payload","IS_USERS_LIST_LOAD","fetchSelectedUser","LOAD_SELECTED_USER","IS_SELECTED_USER_LOAD","UserForm","useState","name","email","username","phone","website","initialValue","Form","useForm","form","city","street","zipcode","formValue","setFormValue","address","useEffect","setFieldsValue","layout","initialValues","onFinish","values","key","loading","content","setTimeout","success","duration","onFinishFailed","value","xs","sm","md","lg","gutter","ROW_GUTTER","Item","label","rules","required","htmlType","EditProfile","match","params","useDispatch","useSelector","Flex","alignItems","mobileFlex","className","isDataLoaded"],"mappings":"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","file":"static/js/11.56ff87be.chunk.js","sourcesContent":["import * as history from 'history';\r\n\r\nexport default history.createBrowserHistory();","import axios from 'axios'\r\nimport { API_BASE_URL } from 'configs/AppConfig'\r\nimport history from '../history'\r\nimport { AUTH_TOKEN } from 'redux/constants/Auth'\r\nimport { notification } from 'antd';\r\n\r\nconst service = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 60000\r\n})\r\n\r\n// Config\r\nconst ENTRY_ROUTE = '/auth/login'\r\nconst TOKEN_PAYLOAD_KEY = 'authorization'\r\nconst PUBLIC_REQUEST_KEY = 'public-request'\r\n\r\n// API Request interceptor\r\nservice.interceptors.request.use(config => {\r\n\tconst jwtToken = localStorage.getItem(AUTH_TOKEN)\r\n\t\r\n  if (jwtToken) {\r\n    config.headers[TOKEN_PAYLOAD_KEY] = jwtToken\r\n  }\r\n\r\n  if (!jwtToken && !config.headers[PUBLIC_REQUEST_KEY]) {\r\n\t\thistory.push(ENTRY_ROUTE)\r\n\t\twindow.location.reload();\r\n  }\r\n\r\n  return config\r\n}, error => {\r\n\t// Do something with request error here\r\n\tnotification.error({\r\n\t\tmessage: 'Error'\r\n\t})\r\n  Promise.reject(error)\r\n})\r\n\r\n// API respone interceptor\r\nservice.interceptors.response.use( (response) => {\r\n\treturn response.data\r\n}, (error) => {\r\n\r\n\tlet notificationParam = {\r\n\t\tmessage: ''\r\n\t}\r\n\t\r\n\t// Remove token and redirect \r\n\tif (error.response.status === 400 || error.response.status === 403) {\r\n\t\tnotificationParam.message = 'Authentication Fail'\r\n\t\tnotificationParam.description = 'Please login again'\r\n\t\tlocalStorage.removeItem(AUTH_TOKEN)\r\n\t\thistory.push(ENTRY_ROUTE)\r\n\t\twindow.location.reload();\r\n\t}\r\n\r\n\tif (error.response.status === 404) {\r\n\t\tnotificationParam.message = 'Not Found'\r\n\t}\r\n\r\n\tif (error.response.status === 500) {\r\n\t\tnotificationParam.message = 'Internal Server Error'\r\n\t}\r\n\t\r\n\tif (error.response.status === 508) {\r\n\t\tnotificationParam.message = 'Time Out'\r\n\t}\r\n\r\n\tnotification.error(notificationParam)\r\n\r\n\treturn Promise.reject(error);\r\n});\r\n\r\nexport default service","export const getUsersList = (state) => state.user.usersList;\nexport const getIsUsersLoaded = (state) => state.user.isUsersListLoaded;\nexport const getSelectedUser = (state) => state.user.selectedUser;\nexport const getIsSelectedUserLoaded = (state) => state.user.isSelectedUserLoaded;\n","import fetch from 'auth/FetchInterceptor'\n\nconst userService = {}\n\nuserService.getUsersList = function () {\n    return fetch({\n        url: '/users',\n        method: 'get',\n    })\n}\n\nuserService.getSelectedUser = function (id) {\n    return fetch({\n        url: `/users/${id}`,\n        method: 'get',\n    })\n}\n\nexport default userService","import {IS_SELECTED_USER_LOAD, IS_USERS_LIST_LOAD, LOAD_SELECTED_USER, LOAD_USERS_LIST} from \"../constants/User\";\nimport userService from \"../../services/UserServices\";\n\nexport function loadUsersList(usersList) {\n    return {\n        type: LOAD_USERS_LIST,\n        payload: usersList\n    };\n}\nexport function isLoadUsersList(isUserListLoaded) {\n    return {\n        type: IS_USERS_LIST_LOAD,\n        payload: isUserListLoaded\n    };\n}\n\nexport function loadSelectedUser(selectedUser) {\n    return {\n        type: LOAD_SELECTED_USER,\n        payload: selectedUser\n    };\n}\nexport function isSelectedUserLoaded(isSelectedUserLoaded) {\n    return {\n        type: IS_SELECTED_USER_LOAD,\n        payload: isSelectedUserLoaded\n    };\n}\n\nexport function fetchUsersList() {\n    return (dispatch) => {\n        userService.getUsersList()\n            .then((users) => {\n                dispatch(loadUsersList(users))\n                dispatch(isLoadUsersList(true))\n            })\n    };\n}\n\nexport function fetchSelectedUser(id) {\n    return (dispatch) => {\n        userService.getSelectedUser(id)\n            .then((user) => {\n                dispatch(loadSelectedUser(user))\n                dispatch(isSelectedUserLoaded(true))\n            })\n    };\n}\n","import React, {useEffect, useState} from \"react\";\nimport {Button, Col, Form, Input, message, Row} from \"antd\";\nimport {ROW_GUTTER} from \"../../../../../constants/ThemeConstant\";\n\nfunction UserForm({selectedUser}) {\n    const [initialValue, setInitialValue] = useState({\n        name: '',\n        email: '',\n        username: '',\n        phone: '',\n        website: '',\n    })\n    const [form] = Form.useForm();\n\n    const [formValue, setFormValue] = useState({\n        name: '',\n        email: '',\n        username: '',\n        phone: '',\n        website: '',\n        city: '',\n        street: '',\n        zipcode: '',\n    })\n\n    const {name, email, username, phone, website, address} = selectedUser;\n    const {street, city, zipcode} = address;\n\n    const handlerSubmitSuccess = (values) => {\n        const key = 'updatable';\n        message.loading({content: 'Сохранение...', key});\n        setTimeout(() => {\n            setFormValue({\n                name: values.name,\n                email: values.email,\n                username: values.username,\n                phone: values.phone,\n                website: values.website,\n                city: values.city,\n                street: values.street,\n                zipcode: values.zipcode,\n            })\n            message.success({content: 'Сохранено!', key, duration: 2});\n        }, 1000);\n    }\n\n    const handlerSubmitError = (value) => {\n        const key = 'updatable';\n        message.success({content: 'Ошибка!', key, duration: 2});\n    }\n\n\n    useEffect(() => {\n        setFormValue({\n            name: name,\n            email: email,\n            username: username,\n            phone: phone,\n            website: website,\n            city: city,\n            street: street,\n            zipcode: zipcode,\n        })\n\n        form.setFieldsValue(formValue)\n    }, [selectedUser])\n\n    return (\n        <Form\n            form={form}\n            name=\"basicInformation\"\n            layout=\"vertical\"\n            initialValues={initialValue}\n            onFinish={handlerSubmitSuccess}\n            onFinishFailed={handlerSubmitError}\n        >\n            <Row>\n                <Col xs={24} sm={24} md={24} lg={16}>\n                    <Row gutter={ROW_GUTTER}>\n                        <Col xs={24} sm={24} md={12}>\n                            <Form.Item\n                                label=\"Name\"\n                                name=\"name\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your name!',\n                                    },\n                                ]}\n                            >\n                                <Input/>\n                            </Form.Item>\n                        </Col>\n                        <Col xs={24} sm={24} md={12}>\n                            <Form.Item\n                                label=\"Username\"\n                                name=\"username\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your username!'\n                                    },\n                                ]}\n                            >\n                                <Input/>\n                            </Form.Item>\n                        </Col>\n                        <Col xs={24} sm={24} md={12}>\n                            <Form.Item\n                                label=\"Email\"\n                                name=\"email\"\n                                rules={[{\n                                    required: true,\n                                    type: 'email',\n                                    message: 'Please enter a valid email!'\n                                }]}\n                            >\n                                <Input/>\n                            </Form.Item>\n                        </Col>\n                        <Col xs={24} sm={24} md={12}>\n                            <Form.Item\n                                label=\"Phone Number\"\n                                name=\"phone\"\n                            >\n                                <Input/>\n                            </Form.Item>\n                        </Col>\n                        <Col xs={24} sm={24} md={12}>\n                            <Form.Item\n                                label=\"Website\"\n                                name=\"website\"\n                            >\n                                <Input/>\n                            </Form.Item>\n                        </Col>\n                        <Col xs={24} sm={24} md={24}>\n                            <Form.Item\n                                label=\"Street\"\n                                name=\"street\"\n                            >\n                                <Input />\n                            </Form.Item>\n                        </Col>\n                        <Col xs={24} sm={24} md={12}>\n                            <Form.Item\n                                label=\"City\"\n                                name=\"city\"\n                            >\n                                <Input />\n                            </Form.Item>\n                        </Col>\n                        <Col xs={24} sm={24} md={12}>\n                            <Form.Item\n                                label=\"Zip code\"\n                                name=\"zipcode\"\n                            >\n                                <Input />\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Save Change\n                    </Button>\n                </Col>\n            </Row>\n        </Form>\n    )\n}\n\nexport default UserForm;","import React, {useEffect} from 'react';\r\nimport Flex from 'components/shared-components/Flex'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {getIsSelectedUserLoaded, getSelectedUser} from \"../../../../../redux/selectors/User\";\r\nimport {fetchSelectedUser} from \"../../../../../redux/actions\";\r\nimport UserForm from \"./UserForm\";\r\n\r\nfunction EditProfile({match: {params}}) {\r\n    const {id} = params\r\n    const dispatch = useDispatch();\r\n    const selectedUser = useSelector(getSelectedUser);\r\n    const isSelectedUserLoaded = useSelector(getIsSelectedUserLoaded)\r\n    useEffect(() => {\r\n        dispatch(fetchSelectedUser(id))\r\n    }, [isSelectedUserLoaded])\r\n\r\n    return (\r\n        <>\r\n            <Flex alignItems=\"center\" mobileFlex={false} className=\"text-center text-md-left\">\r\n                <div className=\"ml-md-3 mt-md-0 mt-3\">\r\n                </div>\r\n            </Flex>\r\n            <div className=\"mt-4\">\r\n                {isSelectedUserLoaded ? <UserForm id={id} isDataLoaded={isSelectedUserLoaded} selectedUser={selectedUser} /> : ''}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default EditProfile;"],"sourceRoot":""}